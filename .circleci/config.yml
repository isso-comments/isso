version: 2.1

# https://circleci.com/docs/2.0/language-python/
# https://circleci.com/docs/2.0/language-javascript/
#
# According to https://circleci.com/blog/persisting-data-in-workflows-when-to-use-caching-artifacts-and-workspaces/
#
# > How data flows between CircleCI jobs
# > Data can flow between CircleCI jobs in different ways. Workspaces persist
# > data between jobs in a single Workflow. Caching persists data between the
# > same job in different Workflow builds. Artifacts persist data after a
# > Workflow has finished. The use-case, implementation, and amount of time data
# > will hang around varies between them.
#
# > Workspaces moves data in-between sequential jobs in a workflow.
# > When a workspace is declared in a job, one or more files or directories can
# > be added. Each addition creates a new layer in the workspace filesystem.
# > Downstream jobs can then use this workspace for its own needs or add more
# > layers on top.
# > A common approach is to use the workspace to pass generated version numbers
# > from a build job to a deploy job. They can also be used to pass along
# > compiled binaries - but as they need to be uploaded and downloaded again in
# > each job, this can be slower than just passing metadata.
# > Unlike caching, workspaces are not shared between runs as they no longer
# > exists once a workflow is complete. There is one exception, re-running
# > workflows. More information on this and a complete deep-dive of workspaces
# > and be found in tomorrowâ€™s blog post: Deep Diving into CircleCI Workspaces.
# https://circleci.com/blog/deep-diving-into-circleci-workspaces/

general:
  branches:
    only:
     - master # list of branches to build
     - circleci
     - /feature-.*/ # or regexes

orbs:
  # https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  # https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1.0

workflows:
  default:
    jobs:
      - nosetests
      - flakes
      - css
      - docs:
          requires:
            - css # For site.css


jobs:
  nosetests:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run: "ls -la ~ && ls -la ."
      - restore_cache:
          key: pip-pkgs-v1-{{ .Branch }}-{{ checksum "isso/tests/requirements-test.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv ~/venv
            . ~/venv/bin/activate
            pip install -r isso/tests/requirements-test.txt
      - save_cache:
          key: pip-pkgs-v1-{{ .Branch }}-{{ checksum "isso/tests/requirements-test.txt" }}
          paths:
            - "~/venv"
      - run:
          name: Install isso in editable mode
          command: |
            . ~/venv/bin/activate
            pip install -e .
      - run:
          name: Run nosetests with coverage
          command: |
            . ~/venv/bin/activate
            nosetests --with-doctest --with-coverage --cover-package=isso isso/

  flakes:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - restore_cache:
          key: pip-pkgs-v1-{{ .Branch }}-{{ checksum "isso/tests/requirements-test.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv ~/venv
            . ~/venv/bin/activate
            pip install -r isso/tests/requirements-test.txt
      - run:
          name: Run flake8
          # FIXME Allowed to fail until formatting is fixed
          command: |
            . venv/bin/activate
            flake8 . --count --max-line-length=127 --show-source --statistics || /bin/true
      - save_cache:
          key: pip-pkgs-v1-{{ .Branch }}-{{ checksum "isso/tests/requirements-test.txt" }}
          paths:
            - "~/venv"

  css:
    executor: node/default
    steps:
      - checkout
      - restore_cache:
          keys:
          - node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run: npm install node-sass
      - run: ./node_modules/node-sass/bin/node-sass --no-cache docs/_static/css/site.scss docs/_static/css/site.css
      - save_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/project/node_modules

  docs:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - restore_cache:
          key: pip-pkgs-v1-{{ .Branch }}-{{ checksum "isso/tests/requirements-test.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            python3 -m venv ~/venv
            . ~/venv/bin/activate
            pip install -r isso/tests/requirements-test.txt
      - save_cache:
          key: pip-pkgs-v1-{{ .Branch }}-{{ checksum "isso/tests/requirements-test.txt" }}
          paths:
            - "~/venv"
      - run:
          name: Install isso in editable mode
          command: |
            . ~/venv/bin/activate
            pip install -e .
      - run:
          name: Compile docs using sphinx
          command: |
            . ~/venv/bin/activate
            sphinx-build -b dirhtml docs/ docs/_build/html
      - store_artifacts:
          path: docs/_build/html
          destination: docs-html
